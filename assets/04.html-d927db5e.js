import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_04-【-函式-】" tabindex="-1"><a class="header-anchor" href="#_04-【-函式-】" aria-hidden="true">#</a> 04 【 函式 】</h1><p>函式是一組執行特定功能而且可以(選擇)會傳一個值得陳述式。</p><p>將一段已經使用過兩次以上的城市放入函式，在需要時用函式的名稱呼叫</p><p>優點：</p><p>・ 減少打字次數 ・ 減少語法與其他程式錯誤 ・ 減少程式檔案載入時間 ・ 減少執行時間。不論呼叫函式幾次，每一個函式都只編譯一次 ・ 函式可以接收參數，可處理一般情況與特殊案例</p><h2 id="_1-php-函式" tabindex="-1"><a class="header-anchor" href="#_1-php-函式" aria-hidden="true">#</a> 1. PHP 函式</h2><h3 id="_1-定義函式" tabindex="-1"><a class="header-anchor" href="#_1-定義函式" aria-hidden="true">#</a> 1. 定義函式</h3><p>基本語法：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">function_name</span><span class="token punctuation">(</span><span class="token punctuation">[</span>parameter<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>・ 以 <code>function</code> 開頭定義函式</p><p>・ 名稱開頭必須是字母或底線，接下來是任何數量的字母、數字或底線</p><p>・ 必須使用括號</p><p>・ 一或多個參數，以逗號分隔，參數是可選的</p><p>・ 不區分大小寫，print函式用PRINT、Print、PrInT都可被引用</p><h3 id="_2-回傳值" tabindex="-1"><a class="header-anchor" href="#_2-回傳值" aria-hidden="true">#</a> 2. 回傳值</h3><p>當呼叫函式時，會從開始的大括號開始執行陳述式，必須有一個對應的結束大括號。這些陳述式可能包含一個以上的 <code>return</code> 陳述式，它們會強制停止函式的執行，並回到呼叫函式的程式。在 <code>return</code> 後面附加值可讓呼叫方取得它</p><p>範例：</p><p>將字串第一個字改為大寫，其餘都是小寫</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">echo</span> <span class="token function">fix_names</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;naME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">fix_names</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$n3</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$n1</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n2</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-回傳陣列" tabindex="-1"><a class="header-anchor" href="#_3-回傳陣列" aria-hidden="true">#</a> 3. 回傳陣列</h3><p>範例：</p><p>用陣列回傳多個值</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$names</span> <span class="token operator">=</span> <span class="token function">fix_names</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Name&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;naME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$names</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">fix_names</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$n3</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-用參考來傳遞參數" tabindex="-1"><a class="header-anchor" href="#_4-用參考來傳遞參數" aria-hidden="true">#</a> 4. 用參考來傳遞參數</h3><p>範例：</p><p>以參考將值傳給函式</p><p>將字串傳遞給函式，而是先將他們指派給變數</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>    <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Name&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$n3</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;naME&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token variable">$n1</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n2</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n3</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token function">fix_names</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$n1</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n2</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n3</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">fix_names</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$n3</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-回傳全域變數" tabindex="-1"><a class="header-anchor" href="#_5-回傳全域變數" aria-hidden="true">#</a> 5. 回傳全域變數</h3><p>讓函式存取在外部建立的變數最好的做法是在函式內將該變數宣告為全域變數</p><p>在變數名稱前面加上 <code>global</code> 關鍵字可讓程式的每一個部分存取</p><p>範例：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Name&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;name&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$n3</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;naME&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token variable">$n1</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n2</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n3</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token function">fix_names</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$n1</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n2</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span> <span class="token operator">.</span> <span class="token variable">$n3</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">fix_names</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">,</span> <span class="token variable">$n2</span><span class="token punctuation">,</span> <span class="token variable">$n3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">global</span> <span class="token variable">$n1</span><span class="token punctuation">;</span> <span class="token variable">$n1</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">global</span> <span class="token variable">$n2</span><span class="token punctuation">;</span> <span class="token variable">$n2</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">global</span> <span class="token variable">$n3</span><span class="token punctuation">;</span> <span class="token variable">$n3</span> <span class="token operator">=</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$n3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-include-與-require-檔案" tabindex="-1"><a class="header-anchor" href="#_2-include-與-require-檔案" aria-hidden="true">#</a> 2. include 與 require 檔案</h2><p>將多個函式儲存為獨立的檔案，使用 <code>include</code> 與 <code>require</code>引入執行</p><h3 id="_1-include" tabindex="-1"><a class="header-anchor" href="#_1-include" aria-hidden="true">#</a> 1. include</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">include</span> <span class="token string double-quoted-string">&quot;library.php&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每發出一個 <code>include</code> 指令時，都會再次 <code>include</code> 檔案，即使檔案已經被插入，也會被重複執行而產生錯誤訊息。為了避免這個問題，可以使用 <code>include_once</code> 來取代。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">include</span> <span class="token string double-quoted-string">&quot;library.php&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-require-與-require-once" tabindex="-1"><a class="header-anchor" href="#_2-require-與-require-once" aria-hidden="true">#</a> 2. require 與 require_once</h3><p><code>include</code> 與 <code>include_once</code> 有一個潛在的問題在於 PHP 只會試著 <code>include</code> 所要求的檔案，就算找不到檔案，程式還是會繼續執行</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">include_once</span> <span class="token string double-quoted-string">&quot;library.php&quot;</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-php版本相容性" tabindex="-1"><a class="header-anchor" href="#_3-php版本相容性" aria-hidden="true">#</a> 3. PHP版本相容性</h2><p>PHP 是一個持續發展的語言，因此有許多版本。如果你想要檢查某個函式是否可以在程式中使用，可用 <code>function_exists()</code> 檢查所有預先定義與自製的函式</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;array_combine&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Function exists&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Function does not exist - better write our own&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-php-物件" tabindex="-1"><a class="header-anchor" href="#_4-php-物件" aria-hidden="true">#</a> 4. PHP 物件</h2><h3 id="_1-宣告類別" tabindex="-1"><a class="header-anchor" href="#_1-宣告類別" aria-hidden="true">#</a> 1. 宣告類別</h3><p>宣告類別並檢視事件</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">save_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Save User code goes here&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User Object ( [name] =&gt; [password] =&gt; )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-建立物件" tabindex="-1"><a class="header-anchor" href="#_2-建立物件" aria-hidden="true">#</a> 2. 建立物件</h3><p>地一行是指派一個物件給User類別，第二航在呼叫時傳入參數</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>
<span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用物件" tabindex="-1"><a class="header-anchor" href="#_3-使用物件" aria-hidden="true">#</a> 3. 使用物件</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 儲存屬性</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myname&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;mypass&quot;</span><span class="token punctuation">;</span>

    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">save_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 呼叫方法</span>
    
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">save_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Save User code goes here&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>User Object ( [name] =&gt; [password] =&gt; )
User Object ( [name] =&gt; myname [password] =&gt; mypass )
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-複製物件" tabindex="-1"><a class="header-anchor" href="#_4-複製物件" aria-hidden="true">#</a> 4. 複製物件</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$object1</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myname&quot;</span><span class="token punctuation">;</span> 
    <span class="token variable">$object2</span> <span class="token operator">=</span> <span class="token variable">$object1</span><span class="token punctuation">;</span> 
    <span class="token variable">$object2</span><span class="token operator">-&gt;</span> <span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;yourname&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;object1 name = &quot;</span> <span class="token operator">.</span> <span class="token variable">$object1</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;object2 name = &quot;</span> <span class="token operator">.</span> <span class="token variable">$object2</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>object1 name = yourname
object2 name = yourname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因為$object1與$object2都引用同一個物件，因此改變$object2的name屬性，┼同時也會$object1的name屬性</p><h4 id="clone" tabindex="-1"><a class="header-anchor" href="#clone" aria-hidden="true">#</a> clone</h4><p>為了避免這種情形，可以使用 <code>clone</code> 運算子，它會建立一個新的類別實例，並且將原本實例的屬性值複製給新的實例</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$object1</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myname&quot;</span><span class="token punctuation">;</span> 
    <span class="token variable">$object2</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$object1</span><span class="token punctuation">;</span> 
    <span class="token variable">$object2</span><span class="token operator">-&gt;</span> <span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;yourname&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;object1 name = &quot;</span> <span class="token operator">.</span> <span class="token variable">$object1</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;object2 name = &quot;</span> <span class="token operator">.</span> <span class="token variable">$object2</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>object1 name = myname
object2 name = yourname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-建構式" tabindex="-1"><a class="header-anchor" href="#_5-建構式" aria-hidden="true">#</a> 5. 建構式</h3><p>建立新物件時，可以傳遞一串參數給呼叫的類別。這些參數會被傳給類別中一個特別的方式，稱為建構式(constructor)，會將各種屬性初始化</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$param1</span><span class="token punctuation">,</span> <span class="token variable">$param2</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;Guest&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-解構式" tabindex="-1"><a class="header-anchor" href="#_6-解構式" aria-hidden="true">#</a> 6. 解構式</h3><p>也可以建立解構式(destructor)，在結束參考某個物件或腳本執行完畢時很實用</p><p>解構式可以作清理工作，例如解開之前在類別內保留的資料庫連結或其他資源的連結。因為在類別中保留了資源，所以就必須在這裡釋出它，否則他將會無限期存留。許多系統規模的問題都是程式保留資源淡旺季式出而造成的</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-編寫方法" tabindex="-1"><a class="header-anchor" href="#_7-編寫方法" aria-hidden="true">#</a> 7. 編寫方法</h3><p>宣告方法與宣告函示很像，但還是有一些差異。例如以雙底線(__)開頭的方法名稱是被保留的，所以不能以這種格式來命名方法</p><p>可以用特殊的變數$this來存取目前物件的屬性</p><p>範例中的User類別的定義中有一個方法：get_password</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function-definition function">get_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;secret&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">get_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>get_password使用$this變數來存取目前的物件，並回傳物件的password屬性</p><h3 id="_8-宣告屬性" tabindex="-1"><a class="header-anchor" href="#_8-宣告屬性" aria-hidden="true">#</a> 8. 宣告屬性</h3><p>不一定要在類別中明確地宣告屬性，當第一次使用時，就會暗中定義它</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myname&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這種寫法因為name不是在類別內宣告的，可能會引發難以尋找的錯誤</p><p>當在類別中宣告屬性時，可以設定初始值。使用的值必須是常數值，而不是函式或運算式的結果</p><p>以下是正確與不正確的屬性宣告：</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">{</span>
        <span class="token comment">// 正確</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myname&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

        <span class="token comment">// 不正確</span>
        <span class="token keyword">public</span> <span class="token variable">$time</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$score</span> <span class="token operator">=</span> <span class="token variable">$level</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-宣告常數" tabindex="-1"><a class="header-anchor" href="#_9-宣告常數" aria-hidden="true">#</a> 9. 宣告常數</h3><p>與使用 <code>define</code> 函式建立全域常數一樣，可以在類別中定義常數</p><p>常數通常以大寫命名</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token class-name static-context">Translate</span><span class="token operator">::</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Translate</span><span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token constant">ENGLISH</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token constant">SPANISH</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token constant">FRENCH</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token constant">GERMAN</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">SPANISH</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-屬性與方法範圍" tabindex="-1"><a class="header-anchor" href="#_10-屬性與方法範圍" aria-hidden="true">#</a> 10. 屬性與方法範圍</h3><p>・ public</p><p>可以在任何地方參考，包括其他的類別與物件實例。在預設情況下都假定是public</p><p>・ protected</p><p>只能被物件的類別方法或仔類別的類別方法參考</p><p>・ private</p><p>只能被同一個類別方法參考，子類別不能參考</p><h4 id="選擇方法" tabindex="-1"><a class="header-anchor" href="#選擇方法" aria-hidden="true">#</a> 選擇方法</h4><p>・ public：當外部程式碼應該存取這個成員，而且後代類別也應該繼承它時</p><p>・ protected：當外部程式碼不應該存取這個成員，而且後代類別也不應該繼承它時</p><p>・ private：當外部程式碼不應該存取這個成員而且後代類別也不應該繼承它時</p><h4 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h4><p>改變屬性與方法的範圍</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Example</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;myname&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 與public相同但不建議使用</span>
        <span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$usercount</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-靜態方法" tabindex="-1"><a class="header-anchor" href="#_11-靜態方法" aria-hidden="true">#</a> 11. 靜態方法</h3><p>可以將任何方法定義為靜態，也就是說之後要用類別來呼叫它，而不是物件。靜態方法不存取任何屬性</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">pwd_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">pwd_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Please enter your password&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用雙冒號呼叫類別本身以及靜態方法(也稱為範圍解析運算子)，不是-&gt;</p><p>靜態函式很適合用來執行與類別本身有關的動作，而不是類別的特定實例</p><p>如果常是在靜態方法裡面存取 <code>$this-&gt;property</code> 或其他物件屬性，會看到錯誤訊息</p><h3 id="_12-靜態屬性" tabindex="-1"><a class="header-anchor" href="#_12-靜態屬性" aria-hidden="true">#</a> 12. 靜態屬性</h3><p>大部分的資料與方法都用於類別的實例。例如，在User類別中設定使用者的密碼或檢查使用者何時註冊。這些事實與操作都只限於各個使用者，因此要使用實例專用的屬性與方法</p><p>但有熟也想要維護關於整個類別的資料。例如為了回報有多少使用者註冊，會儲存一個是用於整個User類別的變數。PHP為這類資料提供了靜態屬性與方法</p><p>將類別的成員宣告為static之後，可以在沒有實體化類別的情況下使用它。類別的實例不能直接存取以static宣告的屬性，但是可以操作靜態方法</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>   <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Test A: &quot;</span> <span class="token operator">.</span> <span class="token class-name static-context">Test</span><span class="token operator">::</span><span class="token variable">$static_property</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Test B: &quot;</span> <span class="token operator">.</span> <span class="token variable">$temp</span><span class="token operator">-&gt;</span><span class="token function">get_sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Test C: &quot;</span> <span class="token operator">.</span> <span class="token variable">$temp</span><span class="token operator">-&gt;</span><span class="token property">static_property</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">{</span>
        <span class="token keyword">static</span> <span class="token variable">$static_property</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;static&quot;</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function-definition function">get_sp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$static_property</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test A 可以透過雙冒號運算子來參考屬性$static_property</p><p>Test B 可以呼叫類別Test建立的物件$temp的get_sp方法來取得值</p><p>Test C 因為靜態屬性$static_property無法以物件$temp讀取</p><p>get_sp使用關鍵字self來讀取$static_prperty。這就是在類別內直接讀取靜態屬性或常數的方法</p><h3 id="_13-繼承" tabindex="-1"><a class="header-anchor" href="#_13-繼承" aria-hidden="true">#</a> 13. 繼承</h3><p>可以用以寫好的類別來產生子類別，這種功能可以節省程式重寫時間：當想編寫類別時，可以用一個類似的既有類別來延伸子類別，只要修改不一樣的地方即可。</p><p>使用extends實現繼承功能</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscriber</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;user&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;pword&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">phone</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;12345678&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">email</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;user@gmail.com&quot;</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function-definition function">save_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Save User code goes here&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Subscriber</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$phone</span><span class="token punctuation">,</span> <span class="token variable">$email</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function-definition function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Name：&quot;</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Password：&quot;</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;phone：&quot;</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">phone</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;email：&quot;</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">email</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原始的User類別有兩個屬性：$name與$password，以及一個將目前的使用存入資料庫的方法。Subscriber擴充這個類別，加入兩個屬性：$phone與$email，以及一個顯示目前物件屬性的方法。方法中的變數$this引用的是目前使用的物件的值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Nameuser
Passwordpword
phone12345678
emailuser@gmail.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-parent關鍵字" tabindex="-1"><a class="header-anchor" href="#_14-parent關鍵字" aria-hidden="true">#</a> 14. parent關鍵字</h3><p>如果在子類別使用的函式名稱與父類別相同，它的陳述式會覆寫父類別裡面的函式。</p><p>如果想使用父類別的方法，可以使用parent運算子</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Dad</span><span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;[Class Dad] I am your Father&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Son</span>  <span class="token keyword">extends</span> <span class="token class-name">Dad</span> <span class="token punctuation">{</span>
        <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;[Class Son] I am Luke&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function-definition function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>類別Son繼承類別Dad的屬性與方法，兩個類別都有test方法，使用parent運算子執行類別Dad裡的test方法</p><h3 id="_15-子類別建構式" tabindex="-1"><a class="header-anchor" href="#_15-子類別建構式" aria-hidden="true">#</a> 15. 子類別建構式</h3><p>當想要延伸一個類別並宣告自己的建構式，PHP不會自動呼叫父類別的建構式。</p><p>如果想要確保所有的初始化程式碼都會執行，就必須讓子類別呼叫父類別構建式</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tiger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Tigers have...&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Fur: &quot;</span> <span class="token operator">.</span> <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">fur</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;&lt;br&gt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Stripes: &quot;</span> <span class="token operator">.</span> <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token property">stripes</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Wildcat</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$fur</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">fur</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;TRUE&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Tiger</span> <span class="token keyword">extends</span> <span class="token class-name">Wildcat</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token variable">$stripes</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">stripes</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;TRUE&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-final-方法" tabindex="-1"><a class="header-anchor" href="#_16-final-方法" aria-hidden="true">#</a> 16. final 方法</h3><p>如果想要避免子類別覆寫父類別的方法，可以使用final關鍵字</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code>  <span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">function</span> <span class="token function-definition function">copyright</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;This class was written by Joe Smith&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,135),o=[t];function i(l,c){return s(),a("div",null,o)}const r=n(p,[["render",i],["__file","04.html.vue"]]);export{r as default};
