import{_ as s,p as n,q as a,a1 as e}from"./framework-96b046e1.js";const p="/learning_note/images/mysql/06/stored_procedure_1.png",t="/learning_note/images/mysql/06/stored_procedure_2.png",o={},c=e('<h1 id="_05-【-預存程序-】" tabindex="-1"><a class="header-anchor" href="#_05-【-預存程序-】" aria-hidden="true">#</a> 05 【 預存程序 】</h1><h2 id="_1-介紹" tabindex="-1"><a class="header-anchor" href="#_1-介紹" aria-hidden="true">#</a> 1. 介紹</h2><h3 id="_1-sql指令執行過程" tabindex="-1"><a class="header-anchor" href="#_1-sql指令執行過程" aria-hidden="true">#</a> 1. SQL指令執行過程</h3><p><img src="'+p+'" alt="stored_procedure_1"></p><h4 id="從sql執行的流程中分析存在的問題" tabindex="-1"><a class="header-anchor" href="#從sql執行的流程中分析存在的問題" aria-hidden="true">#</a> 從SQL執行的流程中分析存在的問題：</h4><h5 id="_1-如果需要重複執行多次相同的sql-都需要通過連接傳遞至mysql-並且需要經過編譯和執行的動作" tabindex="-1"><a class="header-anchor" href="#_1-如果需要重複執行多次相同的sql-都需要通過連接傳遞至mysql-並且需要經過編譯和執行的動作" aria-hidden="true">#</a> 1. 如果需要重複執行多次相同的SQL，都需要通過連接傳遞至MySQL，並且需要經過編譯和執行的動作</h5><h5 id="_2-如果需要連續執行多個sql指定-並且第二個sql指令需要使用第一個sql指令的執行結果作為參數" tabindex="-1"><a class="header-anchor" href="#_2-如果需要連續執行多個sql指定-並且第二個sql指令需要使用第一個sql指令的執行結果作為參數" aria-hidden="true">#</a> 2. 如果需要連續執行多個SQL指定，並且第二個SQL指令需要使用第一個SQL指令的執行結果作為參數</h5><h3 id="_2-預存程序" tabindex="-1"><a class="header-anchor" href="#_2-預存程序" aria-hidden="true">#</a> 2. 預存程序</h3><p>將能夠完成特定功能的SQL指令進行封裝(SQL指令集)，編譯之後儲存在資料庫伺服器中，並且取一個名字，用戶端可以通過名字直接調用這個SQL指令集，取得執行結果</p><p><img src="'+t+`" alt="stored_procedure_2"></p><h2 id="_2-建立預存程序" tabindex="-1"><a class="header-anchor" href="#_2-建立預存程序" aria-hidden="true">#</a> 2. 建立預存程序</h2><p>預存程序：將能夠完成特定功能的SQL指令進行封裝</p><h3 id="_1-語法" tabindex="-1"><a class="header-anchor" href="#_1-語法" aria-hidden="true">#</a> 1. 語法：</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> <span class="token operator">&lt;</span>proc_name<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">IN</span><span class="token operator">/</span><span class="token keyword">OUT</span> args<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token comment">--SQL</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-範例" tabindex="-1"><a class="header-anchor" href="#_2-範例" aria-hidden="true">#</a> 2. 範例：</h3><h4 id="建立一個預存程序實現加法運算" tabindex="-1"><a class="header-anchor" href="#建立一個預存程序實現加法運算" aria-hidden="true">#</a> 建立一個預存程序實現加法運算：</h4><blockquote><p>Java語法中，方法是有 <code>參數</code> 和 <code>返回值</code> 的，預存程序中，是有 <code>輸入參數</code> 和 <code>輸出參數</code> 的</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> proc_test1<span class="token punctuation">(</span> <span class="token operator">IN</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> b <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> c <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">SET</span> c<span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-調用" tabindex="-1"><a class="header-anchor" href="#_3-調用" aria-hidden="true">#</a> 3. 調用</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">// 定義變數m</span>
<span class="token keyword">set</span> <span class="token variable">@m</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">// 調用預存程序, 將3傳遞給a, 將2傳遞給b, 將@m傳遞給c</span>
<span class="token keyword">call</span> proc_test1<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token variable">@m</span><span class="token punctuation">)</span>

<span class="token comment">// 顯示變數值</span>
<span class="token keyword">select</span> <span class="token variable">@m</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-預存程序中變數的使用" tabindex="-1"><a class="header-anchor" href="#_3-預存程序中變數的使用" aria-hidden="true">#</a> 3. 預存程序中變數的使用</h2><p>預存程序中的變數分為兩種：區域性變數　與　使用者變數</p><h3 id="_1-區域性變數-定義在預存程序中的變數-只能在預存程序內部使用" tabindex="-1"><a class="header-anchor" href="#_1-區域性變數-定義在預存程序中的變數-只能在預存程序內部使用" aria-hidden="true">#</a> 1. 區域性變數：定義在預存程序中的變數, 只能在預存程序內部使用</h3><p>區域性變數要定義在預存程序中, 而且必須定義在預存程序開始</p><p>語法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">declare</span> <span class="token operator">&lt;</span>attr_name<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token keyword">type</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token keyword">default</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>舉例：建立一個預存程序：計算輸入參數的 平方 與 輸入參數/2 之和</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> proc_test2<span class="token punctuation">(</span><span class="token operator">IN</span> a <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> r <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">declare</span> x <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定義x, int型態, 默認值為0</span>
    <span class="token keyword">declare</span> y <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定義y, int型態, 默認值為1</span>
    <span class="token keyword">set</span> x <span class="token operator">=</span> a<span class="token operator">*</span>a<span class="token punctuation">;</span>
    <span class="token keyword">set</span> y <span class="token operator">=</span> a<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">set</span> r <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用者變數" tabindex="-1"><a class="header-anchor" href="#_2-使用者變數" aria-hidden="true">#</a> 2. 使用者變數</h3><p>相當於全域變數, 定義的使用者變數可以通過 <code>select @attrName from dual</code> 進行查詢</p><blockquote><p>使用者變數會儲存在MySQL資料庫的資料字典中(dual)</p><p>使用者變數使用 <code>set</code> 直接定義, 變數名義要以@開頭</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token variable">@n</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-給變數設定值" tabindex="-1"><a class="header-anchor" href="#_3-給變數設定值" aria-hidden="true">#</a> 3. 給變數設定值</h3><p>無論是區域性變數 or 使用者變數, 都是使用 <code>set</code> 修改值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token variable">@n</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> proc_test2<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token variable">@n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token variable">@n</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-將查詢結果賦值給變數" tabindex="-1"><a class="header-anchor" href="#_4-將查詢結果賦值給變數" aria-hidden="true">#</a> 4. 將查詢結果賦值給變數</h3><p>在預存程序中使用<code>select ... INTO ...</code>給變數賦值</p><p>舉例：建立預存程序：查詢學生的數量並返回</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">// 查詢學生數量</span>
<span class="token keyword">create</span> <span class="token keyword">procedure</span> proc_test3<span class="token punctuation">(</span><span class="token keyword">OUT</span> c <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">begin</span>
    <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>stu_num<span class="token punctuation">)</span> <span class="token keyword">INTO</span> c <span class="token keyword">from</span> students<span class="token punctuation">;</span> <span class="token comment">// 將查詢到的學生數量賦值給c</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token comment">// 調用預存程序</span>
<span class="token keyword">call</span> proc_test3<span class="token punctuation">(</span><span class="token variable">@n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token variable">@n</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-使用者變數注意事項" tabindex="-1"><a class="header-anchor" href="#_5-使用者變數注意事項" aria-hidden="true">#</a> 5. 使用者變數注意事項</h3><blockquote><p>因為使用者變數相當於全域變數，可以在SQL指令及多個預存程序中共享，在開發中建議少使用使用者變數，過多時會導致程式不易理解，難以維護</p></blockquote><h2 id="_4-預存程序的參數" tabindex="-1"><a class="header-anchor" href="#_4-預存程序的參數" aria-hidden="true">#</a> 4. 預存程序的參數</h2><blockquote><p>MYSQL預存程序的參數共有三種：<code>IN</code> / <code>OUT</code> / <code>INOUT</code></p></blockquote><h3 id="_1-in-輸入參數" tabindex="-1"><a class="header-anchor" href="#_1-in-輸入參數" aria-hidden="true">#</a> 1. IN 輸入參數</h3><h4 id="在調用過程中傳遞資料給預存程序的參數-在調用的過程必須為具有實際值的變數-或-字面值" tabindex="-1"><a class="header-anchor" href="#在調用過程中傳遞資料給預存程序的參數-在調用的過程必須為具有實際值的變數-或-字面值" aria-hidden="true">#</a> 在調用過程中傳遞資料給預存程序的參數(在調用的過程必須為具有實際值的變數 或 字面值)</h4><h5 id="建立預存程序-增加學生資料" tabindex="-1"><a class="header-anchor" href="#建立預存程序-增加學生資料" aria-hidden="true">#</a> 建立預存程序：增加學生資料</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> proc_test4<span class="token punctuation">(</span><span class="token operator">IN</span> snum <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">IN</span> sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">IN</span> gender <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">IN</span> age <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token operator">IN</span> cid <span class="token keyword">int</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
	<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students<span class="token punctuation">(</span>stu_num<span class="token punctuation">,</span>stu_name<span class="token punctuation">,</span>stu_gender<span class="token punctuation">,</span>stu_age<span class="token punctuation">,</span>cid<span class="token punctuation">)</span>
	<span class="token keyword">VALUES</span><span class="token punctuation">(</span>snum<span class="token punctuation">,</span>sname<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>age<span class="token punctuation">,</span>cid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span><span class="token punctuation">;</span>

<span class="token keyword">CALL</span> proc_test4<span class="token punctuation">(</span><span class="token string">&#39;20222222&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-out輸出參數" tabindex="-1"><a class="header-anchor" href="#_2-out輸出參數" aria-hidden="true">#</a> 2. OUT輸出參數</h3><h4 id="將預存程序中產生的資料返回給調用者-相當於java的返回值-但不同的是一個預存程序可以有多個輸出參數" tabindex="-1"><a class="header-anchor" href="#將預存程序中產生的資料返回給調用者-相當於java的返回值-但不同的是一個預存程序可以有多個輸出參數" aria-hidden="true">#</a> 將預存程序中產生的資料返回給調用者, 相當於Java的返回值, 但不同的是一個預存程序可以有多個輸出參數</h4><h5 id="建立預存程序-根據學生學號-查詢學生姓名" tabindex="-1"><a class="header-anchor" href="#建立預存程序-根據學生學號-查詢學生姓名" aria-hidden="true">#</a> 建立預存程序：根據學生學號, 查詢學生姓名</h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> proc_test5<span class="token punctuation">(</span><span class="token operator">IN</span> snum <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">OUT</span> sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
 <span class="token keyword">SELECT</span> stu_name <span class="token keyword">INTO</span> sname <span class="token keyword">from</span> students <span class="token keyword">WHERE</span> stu_num<span class="token operator">=</span>snum<span class="token punctuation">;</span> <span class="token comment">// 將查詢結果給輸出參數</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>

<span class="token keyword">set</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> proc_test5<span class="token punctuation">(</span><span class="token string">&#39;20210104&#39;</span><span class="token punctuation">,</span> <span class="token variable">@name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token variable">@name</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-inout輸入輸出參數" tabindex="-1"><a class="header-anchor" href="#_3-inout輸入輸出參數" aria-hidden="true">#</a> 3. INOUT輸入輸出參數</h3><p>實際開發中少用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">procedure</span> proc_test6<span class="token punctuation">(</span><span class="token keyword">INOUT</span> str <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">BEGIN</span>
 <span class="token keyword">SELECT</span> stu_name <span class="token keyword">INTO</span> str <span class="token keyword">from</span> students <span class="token keyword">WHERE</span> stu_num<span class="token operator">=</span>str<span class="token punctuation">;</span>
<span class="token keyword">END</span><span class="token punctuation">;</span>

<span class="token keyword">set</span> <span class="token variable">@name</span><span class="token operator">=</span><span class="token string">&#39;20210104&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">call</span> proc_test6<span class="token punctuation">(</span><span class="token variable">@name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token variable">@name</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>https://www.bilibili.com/video/BV1qb4y1Y722?p=66</p>`,55),l=[c];function r(i,d){return n(),a("div",null,l)}const k=s(o,[["render",r],["__file","06.html.vue"]]);export{k as default};
