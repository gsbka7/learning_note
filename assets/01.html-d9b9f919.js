import{_ as d,M as r,p,q as t,R as e,t as o,N as i,a1 as a}from"./framework-96b046e1.js";const n="/learning_note/images/git/01/git_step.png",s={},l=a('<h1 id="_01-【git安裝介紹】" tabindex="-1"><a class="header-anchor" href="#_01-【git安裝介紹】" aria-hidden="true">#</a> 01 【Git安裝介紹】</h1><p>Git 是一種分散式版本的版本控制系統。</p><h2 id="_1-實際應用" tabindex="-1"><a class="header-anchor" href="#_1-實際應用" aria-hidden="true">#</a> 1.實際應用</h2><p>一、備份</p><p>二、還原</p><p>三、協同合作</p><p>四、追溯問題代碼的編寫者與編寫時間</p><h2 id="_2-集中式與分散式" tabindex="-1"><a class="header-anchor" href="#_2-集中式與分散式" aria-hidden="true">#</a> 2.集中式與分散式</h2><h3 id="_2-1-集中式版控系統-centralize-version-control" tabindex="-1"><a class="header-anchor" href="#_2-1-集中式版控系統-centralize-version-control" aria-hidden="true">#</a> 2.1 集中式版控系統 （Centralize Version Control）</h3><p>代表：CVS、SVN</p><p>所有版本檔案統一存放在同一個伺服器中。</p><p>需要連線使用，修改時從伺服器下載檔案，修改後再提交至伺服器。</p><h3 id="_2-2-分散式版本控制系統-distributed-version-control-systems" tabindex="-1"><a class="header-anchor" href="#_2-2-分散式版本控制系統-distributed-version-control-systems" aria-hidden="true">#</a> 2.2 分散式版本控制系統（Distributed Version Control Systems）</h3><p>代表：Git</p><p>除了共享的倉庫外，檔案存放在各個開發者的電腦，每台電腦都擁有一個完整的版本。</p><p>可以離線使用，多人協作時只需要修改的部分推送給對方。</p><h2 id="_2-流程圖" tabindex="-1"><a class="header-anchor" href="#_2-流程圖" aria-hidden="true">#</a> 2. 流程圖</h2><p><img src="'+n+'" alt="Git_step"></p><p>指令：</p><p><code>clone</code>：從遠程倉庫複製代碼至本地倉庫。</p><p><code>checkout</code>：從本地倉庫建立分支。</p><p><code>add</code>：將代碼提交至暫存區。</p><p><code>commit</code>：提交至本地倉庫。</p><p><code>fetch</code>：從遠程倉庫複製到本地倉庫，不進行任何合併。</p><p><code>pull</code>：從遠程倉庫複製到本地倉庫，自動進行合併(merge)，然後放到工作區，相當於fetch + merge。</p><p><code>push</code>：推送至遠程倉庫。</p><br><hr><br><p>工作流程：</p><p>1．從遠程倉庫中複製檔案到本地倉庫。</p><p>2．從本地倉庫 checkout分支然後進行修改。</p><p>3．在提交(commit)前先將代碼加入至暫存區。</p><p>4．提交修改。提交到本地倉庫，本地倉庫中保存修改的各個歷史版本</p><p>5．修改完成後，需要和成員共享時，將代碼push到遠程倉庫。</p><h2 id="_3-安裝與配置" tabindex="-1"><a class="header-anchor" href="#_3-安裝與配置" aria-hidden="true">#</a> 3. 安裝與配置</h2><h3 id="_3-1-安裝" tabindex="-1"><a class="header-anchor" href="#_3-1-安裝" aria-hidden="true">#</a> 3.1 安裝</h3>',37),h={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},_=a('<h3 id="_3-2-配置" tabindex="-1"><a class="header-anchor" href="#_3-2-配置" aria-hidden="true">#</a> 3.2 配置</h3><ol><li><p>滑鼠右鍵打開 Git Bash</p></li><li><p>設置使用者資訊</p></li></ol><p><code>git config --global user.name &quot;user&quot;</code></p><p><code>git config --global user.email &quot;user@gmail.com&quot;</code></p><ol start="3"><li>查看使用者資訊</li></ol><p><code>git config --global user.name</code></p><p><code>git config --global user.email</code></p><p><code>git config --global --list</code>　查看所有配置</p><ol start="4"><li>常用指令設置別名(可選)</li></ol><p>一、打開使用者目錄，建立.basrc檔案</p><p><code>C:\\Users\\user // 打開使用者目錄</code></p><p><code>touch ~/.basrc // 建立.basrc檔案</code></p><p>二、設置指令</p><p>輸出 Git 提交日誌</p><p><code>alias git-log=&#39;git log --pretty=oneline --all --graph --abbrev-commit&#39;</code></p><p>輸出目前目錄所有的檔案與基本資訊</p><p><code>ailas ll=&#39;1s -al&#39;</code></p><h2 id="_4-linux-常用指令" tabindex="-1"><a class="header-anchor" href="#_4-linux-常用指令" aria-hidden="true">#</a> 4 linux 常用指令</h2><p><code>cd</code>：進入目錄</p><p><code>pwd</code>：顯示目前目錄</p><p><code>mkdir</code>：新增目錄</p><p><code>touch</code>：新增檔案</p><p><code>ll</code>：查看所有檔案(目前資料夾)</p><p><code>rm -r</code> 刪除檔案</p><p><code>rm -rf</code> 刪除電腦中全部檔案</p><p><code>mv 檔名 目錄</code> 移動檔案</p><p><code>reset</code> 重新加載終端</p><p><code>history</code> 查看操作歷史</p><p><code>exit</code> 結束退出</p>',29);function u(m,g){const c=r("ExternalLinkIcon");return p(),t("div",null,[l,e("p",null,[o("進入"),e("a",h,[o("Git-官方網站"),i(c)])]),_])}const b=d(s,[["render",u],["__file","01.html.vue"]]);export{b as default};
