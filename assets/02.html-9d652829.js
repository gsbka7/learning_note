import{_ as e,p as d,q as a,a1 as c}from"./framework-96b046e1.js";const o={},i=c('<h1 id="_02-【本地倉庫操作】" tabindex="-1"><a class="header-anchor" href="#_02-【本地倉庫操作】" aria-hidden="true">#</a> 02 【本地倉庫操作】</h1><h2 id="_1-取得本地倉庫" tabindex="-1"><a class="header-anchor" href="#_1-取得本地倉庫" aria-hidden="true">#</a> 1.取得本地倉庫</h2><p>要使用Git進行版本控制，首先需要取得本地倉庫</p><ol><li><p>建立一個空資料夾，做為本地倉庫</p></li><li><p>進入資料夾，打開Git Bash</p></li><li><p>執行<code>git init</code></p></li><li><p>建立成功可在文件夾中看到隱藏的.git資料夾</p></li></ol><h2 id="_2-git-基礎指令" tabindex="-1"><a class="header-anchor" href="#_2-git-基礎指令" aria-hidden="true">#</a> 2.Git 基礎指令</h2><ol><li><p><code>git add</code> (工作區 -&gt; 暫存區)</p></li><li><p><code>git commit</code> (暫存區 -&gt; 本地倉庫)</p></li></ol><h3 id="_2-1-查看修改的狀態-status" tabindex="-1"><a class="header-anchor" href="#_2-1-查看修改的狀態-status" aria-hidden="true">#</a> 2.1 查看修改的狀態 (status)</h3><p>作用：查詢修改的狀態 (暫存區、工作區)</p><p>指令：<code>git status</code></p><p><code>Untracked</code> 未跟蹤</p><p><code>Changes to be committed</code> 即將被提交</p><h3 id="_2-2-工作區加入至暫存區-add" tabindex="-1"><a class="header-anchor" href="#_2-2-工作區加入至暫存區-add" aria-hidden="true">#</a> 2.2 工作區加入至暫存區 (add)</h3><p>作用：工作區的單個或多個檔案檔案加入至暫存區</p><p>指令： <code>git add</code> 單個檔案</p><p><code>git add .</code> 全部檔案</p><h3 id="_2-3-提交暫存區至本地倉庫-commit" tabindex="-1"><a class="header-anchor" href="#_2-3-提交暫存區至本地倉庫-commit" aria-hidden="true">#</a> 2.3 提交暫存區至本地倉庫 (commit)</h3><p>作用：提交暫存區內容至本地倉庫的目前分支</p><p>指令：<code>git commit -m &#39;註釋內容&#39;</code></p><h3 id="_2-4-查看提交日誌-log" tabindex="-1"><a class="header-anchor" href="#_2-4-查看提交日誌-log" aria-hidden="true">#</a> 2.4 查看提交日誌 (log)</h3><p>指令：<code>git log</code></p><p>選項：<code>git log [option]</code></p><p>・<code>--all</code> 顯示所有分支</p><p>・<code>--pretty=oneline </code> 顯示為一行</p><p>・<code>--abbrev-commit</code> 輸出的commited更簡短</p><p>・<code>--graph</code> 以圖的形式顯示</p><h3 id="_2-5-版本切換" tabindex="-1"><a class="header-anchor" href="#_2-5-版本切換" aria-hidden="true">#</a> 2.5 版本切換</h3><p>作用：版本切換，退回之前的版本或被刪除的版本</p><p>指令：<code>git reset --hard commitID</code></p><p>・commitID 可以使用 git-log 或 git log 查詢</p><p>・<code>git reflog</code> 查詢已經刪除的紀錄</p><p>指令：</p><p><code>git reset --hard HEAD^</code> 回退至上一個版本</p><p><code>git reset --hard HEAD~n</code> 回退至第N個版本</p><h3 id="_2-6-忽略列表-gitignre" tabindex="-1"><a class="header-anchor" href="#_2-6-忽略列表-gitignre" aria-hidden="true">#</a> 2.6 忽略列表 (.gitignre)</h3><p>作用：忽略檔案不進行版本控制</p><p>指令：<code>touch .gitignor</code> 新增 .gitignre 檔案至目前目錄</p><p>內容範例：</p><p>・<code>secret.yml</code> 忽略 secret.yml 檔案</p><p>・<code>*.tmp</code> 忽略所有附檔名為 .a 的檔案</p><p>・<code>config/database.yml</code> 忽略 config 目錄下的 database.yml 檔案</p><h3 id="_2-7-分支" tabindex="-1"><a class="header-anchor" href="#_2-7-分支" aria-hidden="true">#</a> 2.7 分支</h3><h4 id="_2-7-1-查看分支" tabindex="-1"><a class="header-anchor" href="#_2-7-1-查看分支" aria-hidden="true">#</a> 2.7.1 查看分支</h4><p>指令：<code>git branch</code></p><h4 id="_2-7-2-建立分支" tabindex="-1"><a class="header-anchor" href="#_2-7-2-建立分支" aria-hidden="true">#</a> 2.7.2 建立分支</h4><p>指令：<code>git branch 分支名</code></p><h4 id="_2-7-3-切換分支" tabindex="-1"><a class="header-anchor" href="#_2-7-3-切換分支" aria-hidden="true">#</a> 2.7.3 切換分支</h4><p>指令：<code>git checkout 分支名</code></p><p>指令：<code>git checkout -b 分支名</code> 建立並切換到該分支</p><h4 id="_2-7-4-合併分支" tabindex="-1"><a class="header-anchor" href="#_2-7-4-合併分支" aria-hidden="true">#</a> 2.7.4 合併分支</h4><p>指令：<code>git merge 分支名稱</code></p><p>通常合併至<code>master</code>分支</p><h4 id="_2-7-5-刪除分支" tabindex="-1"><a class="header-anchor" href="#_2-7-5-刪除分支" aria-hidden="true">#</a> 2.7.5 刪除分支</h4><p>不能刪除目前所在的分支</p><p>指令：<code>git branch -d 分支名</code> 刪除前須做檢查</p><p>指令：<code>git branch -D 分支名</code> 不需檢查，強制刪除</p><h4 id="_2-7-6-解決衝突" tabindex="-1"><a class="header-anchor" href="#_2-7-6-解決衝突" aria-hidden="true">#</a> 2.7.6 解決衝突</h4><p>兩個分支上對文件的修改可能會存在衝突，例如修改同一文件的同一行，解決步驟如下：</p><p>1.手動修改衝突部分</p><p>2.將修改好的文件加入暫存區(add)</p><p>3.提交至倉庫(commit)</p><h4 id="_2-7-7-使用原則及流程" tabindex="-1"><a class="header-anchor" href="#_2-7-7-使用原則及流程" aria-hidden="true">#</a> 2.7.7 使用原則及流程</h4><p>・<code>master</code>：主分支，上線的版本</p><p>・<code>develop</code>：從<code>master</code>建立的分支，一般做為開發分支，階段開發完成後合併至<code>master</code>分支</p><p>・<code>release</code>：上線前用來做修復bug與測試的分支，測試完成後，合併至<code>master</code>、<code>develop</code>分支</p><p>・<code>feature</code>：從<code>develop</code>建立的分支，分支上的研發的新功能完成後合併到develop分支</p><p>・<code>hotfit</code>：從<code>master</code>建立的分支，一般做為修復bug使用，完成後需要合併至<code>master</code>、<code>develop</code>分支</p>',66),t=[i];function r(h,p){return d(),a("div",null,t)}const s=e(o,[["render",r],["__file","02.html.vue"]]);export{s as default};
