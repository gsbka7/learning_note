import{_ as a,p as n,q as s,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_99-【-控制反轉實現-】" tabindex="-1"><a class="header-anchor" href="#_99-【-控制反轉實現-】" aria-hidden="true">#</a> 99 【 控制反轉實現 】</h1><h2 id="_1-ioc控制反轉-與-依賴注入-的關係" tabindex="-1"><a class="header-anchor" href="#_1-ioc控制反轉-與-依賴注入-的關係" aria-hidden="true">#</a> 1. Ioc控制反轉 與 依賴注入 的關係</h2><h3 id="_1-ioc控制反轉" tabindex="-1"><a class="header-anchor" href="#_1-ioc控制反轉" aria-hidden="true">#</a> 1. Ioc控制反轉</h3><p>。 一種編寫程式的思想，解決程式違反了OPC和DIP原則的設計模式</p><p>。 降低耦合度，提高擴展力</p><p>。 物件建立的控制權由程式自身轉移(反轉)到外部(容器)</p><blockquote><p>不用new的方式來維護物件的關係</p><p>new物件與物件之間的維護權利交由第三方容器管理</p></blockquote><p>。 IoC容器中建立、管理的物件、稱為bean</p><h3 id="_2-依賴注入" tabindex="-1"><a class="header-anchor" href="#_2-依賴注入" aria-hidden="true">#</a> 2. 依賴注入</h3><p>依賴注入實現了控制反轉的思想</p><p>Spring通過依賴注入的方式來完成Bean的管理</p><blockquote><p>Bean管理：</p><ol><li><p>Bean物件的建立</p></li><li><p>Bean物件中屬性的賦值(或稱為Bean物件之間關係的維護)</p></li></ol></blockquote><h4 id="依賴注入" tabindex="-1"><a class="header-anchor" href="#依賴注入" aria-hidden="true">#</a> 依賴注入</h4><p>。 依賴：A物件對B物件的關係</p><p>。 注入：一種資料傳遞行為，讓A物件與B物件產生關係</p><p>。 依賴注入：A物件對B物件之間的關係，依靠注入的手段來維持。注入包含set注入與構造方法注入</p><h4 id="實現方式" tabindex="-1"><a class="header-anchor" href="#實現方式" aria-hidden="true">#</a> 實現方式</h4><p>。 第一種：set注入(執行set方法給屬性賦值)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>。 第二種：構造方法注入(執行構造方法給屬性賦值)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-依賴注入-1" tabindex="-1"><a class="header-anchor" href="#_2-依賴注入-1" aria-hidden="true">#</a> 2. 依賴注入</h2><h3 id="_1-set注入" tabindex="-1"><a class="header-anchor" href="#_1-set注入" aria-hidden="true">#</a> 1. set注入</h3><p>基於set方法實現，底層會通過反射機制調用屬性對應的set方法然後給屬性賦值，這種方式要求屬性必須提供set方法</p><h4 id="spring框架" tabindex="-1"><a class="header-anchor" href="#spring框架" aria-hidden="true">#</a> Spring框架</h4><p>。 實現了IoC控制反轉的思想</p><blockquote><p>幫助new實體化物件</p><p>幫助維護物件與物件之間的關係</p></blockquote><p>。 一個實現了IoC思想的容器</p><p>。 實現方式：依賴注入(DI)</p><blockquote><p>控制反轉是思想，依賴注入是思想的具體實現方式</p><p>包含了兩種方式：set注入、構造方法注入</p></blockquote><h2 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> 1.</h2>`,31),i=[t];function o(c,r){return n(),s("div",null,i)}const l=a(p,[["render",o],["__file","99.html.vue"]]);export{l as default};
