import{_ as n,p as a,q as s,a1 as e}from"./framework-96b046e1.js";const p={},t=e(`<h1 id="_02-【-基礎-】" tabindex="-1"><a class="header-anchor" href="#_02-【-基礎-】" aria-hidden="true">#</a> 02 【 基礎 】</h1><h2 id="_1-型別" tabindex="-1"><a class="header-anchor" href="#_1-型別" aria-hidden="true">#</a> 1. 型別</h2><h3 id="_1-字串-string" tabindex="-1"><a class="header-anchor" href="#_1-字串-string" aria-hidden="true">#</a> 1. 字串 (String)</h3><p>字串由一個個單獨的文字組成</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="連接多個字串" tabindex="-1"><a class="header-anchor" href="#連接多個字串" aria-hidden="true">#</a> 連接多個字串</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> world <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> hello <span class="token operator">+</span> world<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字串模板" tabindex="-1"><a class="header-anchor" href="#字串模板" aria-hidden="true">#</a> 字串模板</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> world <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>world<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="轉型成字串" tabindex="-1"><a class="header-anchor" href="#轉型成字串" aria-hidden="true">#</a> 轉型成字串</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> ageString <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 將Number轉型成String</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ageString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="強制轉型" tabindex="-1"><a class="header-anchor" href="#強制轉型" aria-hidden="true">#</a> 強制轉型</h4><p>運算子兩邊數值為不同型別時，JavaScript會嘗試將兩邊的數值轉為相同的型別</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> answer <span class="token operator">=</span> age <span class="token operator">+</span> string<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1818</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>數字與數字可以直接相加，但數字和字串或其他型別相加時，就會觸發強制轉型，字串模板也可以達到強制轉型的效果</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-數值" tabindex="-1"><a class="header-anchor" href="#_2-數值" aria-hidden="true">#</a> 2. 數值</h3><p>基本使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> add <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sub <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> double <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> helf <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="轉型成數值" tabindex="-1"><a class="header-anchor" href="#轉型成數值" aria-hidden="true">#</a> 轉型成數值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了Number函式，如果想轉的數值是整數。可以使用parseInt；如果是浮點數，則使用parseFloat</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">1.23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.23</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>將數值與+符號使用，JavaScript會嘗試把+符號後面的值轉成為數字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token operator">+</span>num1<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-nan-not-a-number" tabindex="-1"><a class="header-anchor" href="#_3-nan-not-a-number" aria-hidden="true">#</a> 3. NaN(Not a Number)</h3><p>當不是數值的型別與數值一起運算或想要轉型為數值型別時，若這個型別無法成功被轉為數值、無法正常計算結果，JavaScript就會回傳NaN這個值</p><p>NaN是一個數值型別的數值，可以用typeof判斷確認</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// number</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-未定義-undefined" tabindex="-1"><a class="header-anchor" href="#_4-未定義-undefined" aria-hidden="true">#</a> 4. 未定義 (undefined)</h3><p>表示變數已經被宣告，但是未被定義值；也就是變數被宣告後沒有被賦予任何內容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-空值-null" tabindex="-1"><a class="header-anchor" href="#_5-空值-null" aria-hidden="true">#</a> 5. 空值 (null)</h3><p>null與undefined都代表「變數沒有內容」，但在開發階段時, undefined是變數宣告的預設值，null所表達的意思比較像是「要讓這個變數的值是空的」</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>null使用typeof判斷結果為object</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">null</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-布林-boolean" tabindex="-1"><a class="header-anchor" href="#_6-布林-boolean" aria-hidden="true">#</a> 6. 布林 (boolean)</h3><p>布林只有兩種數值，真(true)與假(false)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="轉型成布林值" tabindex="-1"><a class="header-anchor" href="#轉型成布林值" aria-hidden="true">#</a> 轉型成布林值</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>轉型為布林值結果，一個比較簡略的判斷依據是，數值有沒有內容、有沒有被定義，像是undefined與null，轉為布林之後會是false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Boolean</span><span class="token punctuation">(</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用反向(NOT)運算子!也能強制轉型為布林值，使用兩次!!就能夠得到原來數值所對應的布林值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> empty <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> zero <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token operator">!</span><span class="token operator">!</span>string<span class="token punctuation">;</span>
<span class="token operator">!</span><span class="token operator">!</span>empty<span class="token punctuation">;</span>
<span class="token operator">!</span><span class="token operator">!</span>zero<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-物件-object" tabindex="-1"><a class="header-anchor" href="#_7-物件-object" aria-hidden="true">#</a> 7. 物件 (object)</h3><p>物件是鍵與值(kye:value)配對的組合</p><h4 id="建立物件" tabindex="-1"><a class="header-anchor" href="#建立物件" aria-hidden="true">#</a> 建立物件</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key1</span> <span class="token operator">:</span>value1<span class="token punctuation">,</span>
    <span class="token literal-property property">key2</span> <span class="token operator">:</span>value2
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="物件屬性的存取" tabindex="-1"><a class="header-anchor" href="#物件屬性的存取" aria-hidden="true">#</a> 物件屬性的存取</h4><p>使用<code>[]</code>或<code>.</code>來取得物件屬性的內容</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key1</span> <span class="token operator">:</span>value1<span class="token punctuation">,</span>
    <span class="token literal-property property">key2</span> <span class="token operator">:</span>value2
<span class="token punctuation">}</span>

obj<span class="token punctuation">[</span><span class="token string">&#39;key1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>key1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-陣列" tabindex="-1"><a class="header-anchor" href="#_8-陣列" aria-hidden="true">#</a> 8. 陣列</h3><h4 id="建立陣列" tabindex="-1"><a class="header-anchor" href="#建立陣列" aria-hidden="true">#</a> 建立陣列</h4><p>陣列裡存放的內容沒有型別上的限制，數字、字串、布林、物件甚至是另一個陣列都是可以的</p><p>通常純放在陣列裡的面數值會被稱為元素(Element)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="陣列元素的存取" tabindex="-1"><a class="header-anchor" href="#陣列元素的存取" aria-hidden="true">#</a> 陣列元素的存取</h4><p>每個元素都有一個區別內容的號碼，稱為索引，索引從0開始</p><p>.length可以取得陣列元素的長度</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;value1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ㄙㄩ</p>`,63),o=[t];function c(i,l){return a(),s("div",null,o)}const u=n(p,[["render",c],["__file","02.html.vue"]]);export{u as default};
