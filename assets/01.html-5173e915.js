import{_ as n,p as s,q as a,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<h1 id="_01-【-javascript技巧-】" tabindex="-1"><a class="header-anchor" href="#_01-【-javascript技巧-】" aria-hidden="true">#</a> 01 【 JavaScript技巧 】</h1><h2 id="_1-與-的區別" tabindex="-1"><a class="header-anchor" href="#_1-與-的區別" aria-hidden="true">#</a> 1. == 與 === 的區別</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">6</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
<span class="token number">6</span> <span class="token operator">===</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment">// true</span>
<span class="token number">6</span> <span class="token operator">==</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
<span class="token number">6</span> <span class="token operator">===</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
<span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// true</span>
<span class="token boolean">true</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
<span class="token boolean">false</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;&quot;</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// true</span>
<span class="token string">&quot;  &quot;</span>  <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// true，null：空值，undefined：有值但未定義</span>

<span class="token comment">// 兩個不等於任何的值，在相等時也不能轉換成其他的值</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">// false</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;false&quot;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token comment">// NaN表示不是數字，並不是確切的一個值，所以NaN不等於自身</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>
<span class="token number">NaN</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>
<span class="token number">NaN</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// a 和 b 儲存在不同的stack(靜態記憶體)</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>

a <span class="token operator">==</span> b<span class="token punctuation">;</span>    <span class="token comment">// false</span>
a <span class="token operator">===</span> b<span class="token punctuation">;</span>   <span class="token comment">// false</span>
a <span class="token operator">==</span> c<span class="token punctuation">;</span>    <span class="token comment">// true</span>
a <span class="token operator">===</span> c<span class="token punctuation">;</span>   <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-對調兩個變數" tabindex="-1"><a class="header-anchor" href="#_2-對調兩個變數" aria-hidden="true">#</a> 2. 對調兩個變數</h2><h3 id="_1-臨時變數法" tabindex="-1"><a class="header-anchor" href="#_1-臨時變數法" aria-hidden="true">#</a> 1. 臨時變數法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> b<span class="token punctuation">;</span>

b <span class="token operator">=</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-加減法" tabindex="-1"><a class="header-anchor" href="#_2-加減法" aria-hidden="true">#</a> 2. 加減法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// a = 8</span>
b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// b = 3</span>
a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token comment">// a = 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-陣列法" tabindex="-1"><a class="header-anchor" href="#_3-陣列法" aria-hidden="true">#</a> 3. 陣列法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-物件法" tabindex="-1"><a class="header-anchor" href="#_4-物件法" aria-hidden="true">#</a> 4. 物件法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span> <span class="token operator">:</span> b<span class="token punctuation">,</span> <span class="token literal-property property">b</span> <span class="token operator">:</span> a<span class="token punctuation">}</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
a <span class="token operator">=</span> b<span class="token punctuation">.</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-陣列運算法" tabindex="-1"><a class="header-anchor" href="#_5-陣列運算法" aria-hidden="true">#</a> 5. 陣列運算法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> b <span class="token operator">=</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-解構賦值法" tabindex="-1"><a class="header-anchor" href="#_6-解構賦值法" aria-hidden="true">#</a> 6. 解構賦值法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-typeof-與-instanceof-的區別" tabindex="-1"><a class="header-anchor" href="#_3-typeof-與-instanceof-的區別" aria-hidden="true">#</a> 3. typeof 與 instanceof 的區別</h2><h3 id="_1-typeof" tabindex="-1"><a class="header-anchor" href="#_1-typeof" aria-hidden="true">#</a> 1. typeof</h3><p>返回一個小寫寫的類型字串</p><p>只需要一個操作數</p><p>必須為基本資料型別、函式、物件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token comment">// boolean</span>
<span class="token keyword">typeof</span> <span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment">// number</span>
<span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>       <span class="token comment">// number</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;string&quot;</span>   <span class="token comment">// string</span>

<span class="token comment">// function</span>
<span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> hello<span class="token punctuation">;</span>
<span class="token keyword">typeof</span> Symbol<span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// object</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">RegEXP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-instanceof" tabindex="-1"><a class="header-anchor" href="#_2-instanceof" aria-hidden="true">#</a> 2. instanceof</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>

b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>

d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
d <span class="token operator">=</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>必須為引用類型</p><p>基本類型會出現結果<code>false</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;string&quot;</span> <span class="token operator">=</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token number">123</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
<span class="token boolean">true</span> <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span><span class="token punctuation">;</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>

<span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;male&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

student <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>

<span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">typeof</th><th style="text-align:center;">instanceof</th></tr></thead><tbody><tr><td style="text-align:center;">作用</td><td style="text-align:center;">檢測資料類型</td><td style="text-align:center;">檢測關聯性</td></tr><tr><td style="text-align:center;">返回</td><td style="text-align:center;">小寫字串</td><td style="text-align:center;">布爾值</td></tr><tr><td style="text-align:center;">操作數</td><td style="text-align:center;">基本資料型別、函式、物件</td><td style="text-align:center;">左邊必須是引用類型，右邊必須是函式</td></tr><tr><td style="text-align:center;">操作數量</td><td style="text-align:center;">一個</td><td style="text-align:center;">兩個</td></tr></tbody></table><h2 id="_4-typeof-nan的結果是什麼" tabindex="-1"><a class="header-anchor" href="#_4-typeof-nan的結果是什麼" aria-hidden="true">#</a> 4. typeof NaN的結果是什麼</h2><p>NaN(not a number) 表示是否屬於number型別的一種狀態：是或否，不是確認的值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN，表達式中存在不可轉換的變數，返回無效的結果，不是返回確切的值</span>

<span class="token comment">// NaN不等於本身，不是確切的值，代表一個範圍</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-null-與-undefined-的區別" tabindex="-1"><a class="header-anchor" href="#_5-null-與-undefined-的區別" aria-hidden="true">#</a> 5. null 與 undefined 的區別</h2><h3 id="_1-兩者都是代表空值" tabindex="-1"><a class="header-anchor" href="#_1-兩者都是代表空值" aria-hidden="true">#</a> 1. 兩者都是代表空值</h3><p>null表示不應該有值</p><p>undefined表示應該有值，但還沒有定義</p><p>null轉為數值為0，undefined轉為數值為NaN(不是一個數字)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-何時會有null" tabindex="-1"><a class="header-anchor" href="#_2-何時會有null" aria-hidden="true">#</a> 2. 何時會有null</h3><ol><li>函式中不傳任何參數時，該函數返回null</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greetObject</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">greetObject</span><span class="token punctuation">(</span><span class="token string">&#39;Eric&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { message: &#39;Hello, Eric!&#39; }</span>
<span class="token function">greetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>作為物件原型鏈的終點</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-何時會有undefined" tabindex="-1"><a class="header-anchor" href="#_3-何時會有undefined" aria-hidden="true">#</a> 3. 何時會有undefined</h3><ol><li>變數被宣告了，但是沒有賦值，就等於undefined</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>調用函式時，應該提供的參數沒有提供，該參數就等於undefined</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>物件沒有賦值的屬性，該屬性的值就等於undefined</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>函式沒有返回值時，默認返回undefined</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-hasownproperty" tabindex="-1"><a class="header-anchor" href="#_6-hasownproperty" aria-hidden="true">#</a> 6. hasOwnProperty</h2><p>檢查物件內是不是存在某個屬性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">var</span> hasName <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>

<span class="token keyword">var</span> hasEmail <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasEmail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="in-運算子" tabindex="-1"><a class="header-anchor" href="#in-運算子" aria-hidden="true">#</a> in 運算子</h4><p>in也能達到相同的目的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
    <span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span> <span class="token keyword">in</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hasownproperty-與-in-的差別" tabindex="-1"><a class="header-anchor" href="#hasownproperty-與-in-的差別" aria-hidden="true">#</a> hasOwnProperty 與 in 的差別</h4><h5 id="hasownproperty" tabindex="-1"><a class="header-anchor" href="#hasownproperty" aria-hidden="true">#</a> hasOwnProperty</h5><p>只檢查在該物件裡面明確定義的屬性，就算對hasOwnProperty這屬性本身或其他所有物件上都有的預設方法(如toString)做檢查，都會得到false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;hasOwnProperty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> in</h5><p>可以檢查到物件上所有可以被取用的屬性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hasOwnProperty&quot;</span><span class="token keyword">in</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;toString&quot;</span> <span class="token keyword">in</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只是想確定物件內的方法是否能被使用，可以使用in</p><p>如果想去定物件內是否存在開發者主動定義的屬性，可以使用hasOwnProperty</p><h4 id="undfined" tabindex="-1"><a class="header-anchor" href="#undfined" aria-hidden="true">#</a> undfined</h4><p>在JavaScript裡面，存取一個不存在的物件屬性，就會得到undefined，就像是變數在宣告之後沒有賦值就去存取它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> hasName <span class="token operator">=</span> user<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hasName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這個方法有一個缺點，如果user物件裡面有這個屬性，只不過值被設定為undefined，就可能會誤判</p><p>通常使用在想要確定物件裡面某個屬性有沒有內容的情況，在這種情況下可以利用強制轉型來進行判斷</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,77),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","01.html.vue"]]);export{r as default};
